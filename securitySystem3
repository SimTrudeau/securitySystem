/*
 Name:		securitySystem2.ino
 Created:	9/21/2018 1:12:20 PM
 Author:	Kirby
 The purpose of this program is to run an arduino based security system.
At this point it is just to test concepts.
An ultrasonic transciever is hooked up to a breadboard along with a passive buzzer and two LED's which are red and green.
Under normal circumstances, the green light will be on along with the ultrasonic sensor.
Should the sensor determine that an object is within a certain proximity, the light switches from red to green.
If it gets even closer, past a second predetermined point, the red light remains on and the buzzer sounds.
@@ -16,70 +16,74 @@ As you back away, the process is reversed, first switching the buzzer off follow
The order which the previous items are connected to the breadboard is arbitrary at this point.
 */

 //buzzer pin connection
#define buzzer 2

//ultrasonic sensor pin connections
#define trigPin 3	//trigPin is the "transmission" pin
#define echoPin 4	//echoPin is the "reception" pin


 //indicator lights
const int greenLED = 5;
const int redLED = 6;

//used to calculate distance
float duration, distance;

// the setup function runs once when you press reset or power the board
void setup() 
{
	Serial.begin(9600);
	Serial.println("SECURITY SYSTEM");
	Serial.println("initializing...");
	
	//Setting the pin modes
	pinMode(buzzer, OUTPUT);
	pinMode(trigPin, OUTPUT);
	pinMode(echoPin, INPUT);
	pinMode(greenLED, OUTPUT);
	pinMode(redLED, OUTPUT);

	//initializing the ultrasonic module (transmission "OFF")
	digitalWrite(trigPin, LOW);
	//initializing the LEDs (Green LED ON, Red LED Off)
	digitalWrite(greenLED, HIGH);
	digitalWrite(redLED, LOW);

	//initializing the buzzer (OFF)
	digitalWrite(buzzer, LOW);
	delay(1000);
	Serial.println("Setup Completed");
}

// the loop function runs over and over again until power down or reset
void loop() 
{
	//tranmitting the ultrasonic pulses
	transmitPulse();

	//measuring the return pulse
	duration = pulseIn(echoPin, HIGH);
	//calculate the distance (in cm) based on the speed of sound
	distance = duration * 0.0343 / 2;
	//display reading in serial monitor
	Serial.println(String(distance) + " cm");
	delay(50);
	
	// read the sensor:
	int sensorReading = echoPin 4;

	// map the sensor range to a range of four options:
	int range = map(sensorReading, sensorMin, sensorMax, 0, 3);

	// do something different depending on the range value:
	switch (range) 
	{
	case 0:    // your hand is on the sensor
		Serial.println("Alarm");
		break;
	case 1:    // your hand is close to the sensor
		Serial.println("Bad");
		break;
	case 2:    // your hand is a few inches from the sensor
		Serial.println("Medium");
		break;
	case 3:    // your hand is nowhere near the sensor
		Serial.println("Good");
		break;
	}
}

void transmitPulse()
{
	//making sure that the trigPin is Off before we start transmitting.
	digitalWrite(trigPin, LOW);
	delayMicroseconds(2);
	//transmitting a pulse for 10 microseconds
	digitalWrite(trigPin, HIGH);
	delayMicroseconds(10);
	//turn off the transmitter
	digitalWrite(trigPin, LOW);
}
